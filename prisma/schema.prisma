generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Show {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  adult Boolean
  backdropPath String
  name String @unique
  originalLanguage String
  originalName String
  overview String
  posterPath String
  mediaType String
  popularity Float
  voteAverage Float
  voteCount BigInt
  userIDs String[] @db.ObjectId
  users User[] @relation(fields: [userIDs], references: [id])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  pinnedShowsIDs String[] @db.ObjectId
  pinnedShows Show[] @relation(fields: [pinnedShowsIDs], references: [id])
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}