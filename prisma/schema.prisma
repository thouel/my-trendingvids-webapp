generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Show {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  externalId          BigInt        @unique
  name                String        @unique
  adult               Boolean
  backdropPath        String
  originalLanguage    String
  originalName        String
  overview            String
  posterPath          String
  mediaType           String
  popularity          Float
  voteAverage         Float
  voteCount           BigInt
  numberOfSeasons     Int
  homepage            String
  imdbId              String
  userIDs             String[]      @db.ObjectId
  users               User[]        @relation(fields: [userIDs], references: [id])
  networkIDs          String[]      @db.ObjectId
  networks            Network[]     @relation(fields: [networkIDs], references: [id])
}

model Network {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  externalId          BigInt        @unique
  logoPath            String
  name                String
  showIDs             String[]      @db.ObjectId
  shows               Show[]        @relation(fields: [showIDs], references: [id])
}

model User {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  sessions            Session[]
  pinnedShowsIDs      String[]      @db.ObjectId
  pinnedShows         Show[]        @relation(fields: [pinnedShowsIDs], references: [id])
}

model Account {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              String        @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?       @db.String
  access_token        String?       @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?       @db.String
  session_state       String?
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  sessionToken        String        @unique
  userId              String        @db.ObjectId
  expires             DateTime
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier          String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  token               String        @id @default(cuid()) @map("_id")
  expires             DateTime

}