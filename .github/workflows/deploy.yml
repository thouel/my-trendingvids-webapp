name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #=========== THE MOVIE DATABASE CONFIG ===========#
  TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

  #=========== NEXT-AUTH CONFIG ===========#
  ## NEXTAUTH_URL is not necessary in production env deployed on Vercel
  # NEXTAUTH_URL=${LOCAL_URL}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  AUTH_REDIRECT_PROXY_URL: ${{ secrets.AUTH_REDIRECT_PROXY_URL }}

  # NEXT-AUTH GITHUB PROVIDER CONFIG
  NEXTAUTH_GITHUB_ID: ${{ secrets.NEXTAUTH_GITHUB_ID }}
  NEXTAUTH_GITHUB_SECRET: ${{ secrets.NEXTAUTH_GITHUB_SECRET }}

  # NEXT-AUTH TWITCH PROVIDER CONFIG
  TWITCH_ID: ${{ secrets.TWITCH_ID }}
  TWITCH_SECRET: ${{ secrets.TWITCH_SECRET }}

  # NEXT-AUTH EMAIL PROVIDER CONFIG
  EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER }}
  EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD }}
  EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST }}
  EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
  EMAIL_FROM: ${{ secrets.EMAIL_FROM }}

  #=========== MONGODB CONFIG ===========#
  MONGODB_URL: ${{ secrets.MONGODB_URL }}

  # to tell nextjs to automatically push this client side, we prefix the key with NEXT_PUBLIC
  # @see https://nextjs.org/docs/app/building-your-application/configuring/environment-variables
  # NEXT_PUBLIC_LOCAL_URL=${LOCAL_URL}
  NEXT_PUBLIC_LOCAL_URL: 'https://my-trendingvids-webapp.vercel.app'
  LOCAL_URL: 'https://my-trendingvids-webapp.vercel.app'
on:
  workflow_run:
    workflows: [Preflight]
    types: [completed]
jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'The triggering workflow failed'
  on-success:
    runs-on: ubuntu-latest
    environment: Production
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo 'The triggering workflow passed'
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Create env file
        run: |
          touch .env.production
          echo TMDB_API_KEY=${{ secrets.TMDB_API_KEY }} >> .env.production
          echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> .env.production
          echo AUTH_REDIRECT_PROXY_URL=${{ secrets.AUTH_REDIRECT_PROXY_URL }} >> .env.production
          echo NEXTAUTH_GITHUB_ID=${{ secrets.NEXTAUTH_GITHUB_ID }} >> .env.production
          echo NEXTAUTH_GITHUB_SECRET=${{ secrets.NEXTAUTH_GITHUB_SECRET }} >> .env.production
          echo TWITCH_ID=${{ secrets.TWITCH_ID }} >> .env.production
          echo TWITCH_SECRET=${{ secrets.TWITCH_SECRET }} >> .env.production
          echo EMAIL_SERVER_USER=${{ secrets.EMAIL_SERVER_USER }} >> .env.production
          echo EMAIL_SERVER_PASSWORD=${{ secrets.EMAIL_SERVER_PASSWORD }} >> .env.production
          echo EMAIL_SERVER_HOST=${{ secrets.EMAIL_SERVER_HOST }} >> .env.production
          echo EMAIL_SERVER_PORT=${{ secrets.EMAIL_SERVER_PORT }} >> .env.production
          EMAIL_FROM=${{ secrets.EMAIL_FROM }} >> .env.production
          cat .env.production
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
